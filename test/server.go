package main
 
import (
    "fmt"
    "errors"
    "net"
    "bytes"
    "encoding/binary"
    "os"
    // "C"
    // "unsafe"
)
 
type udp_tracker_request struct {
	protocol_id		uint64;
	action			uint32;
	transaction_id	uint32;
	addr			*net.UDPAddr;
}

type udp_tracker_response struct {
	action			uint32;
	transaction_id	uint32;
	connection_id	uint64; //Can remove this.
}

type ipv4_announce_request struct {
	connection_id	uint64;
	action			uint32;
	transaction_id	uint32;
	info_hash		[20]byte;
	peer_id			[20]byte;
	downloaded		uint64;
	left			uint64;
	uploaded		uint64;
	event			uint32;
	ip_addr			uint32;
	key				uint32;
	num_want		int32;
	port			uint16;
	pad				[2]byte;
	addr 			*net.UDPAddr;
};

type ipv4_announce_response struct {
	action			uint32;
	transaction_id	uint32;
	interval		uint32;
	leechers		uint32;
	seeders			uint32;
}

/* A Simple function to verify error */
func CheckError(err error) {
    if err  != nil {
        fmt.Println("Error: " , err)
        os.Exit(0)
    }
}

func read_handshake(conn *net.UDPConn) (udp_tracker_request, error) {
	var buffer	*bytes.Buffer;
	var request	udp_tracker_request;

	if buffer = bytes.NewBuffer(make([]byte, 16)); buffer == nil {
		return request, errors.New("Failed to initialize");
	}
	n, addr, err := conn.ReadFromUDP((*buffer).Bytes());
	if err != nil || n != 16 {
		if (err == nil) {
			return request, errors.New(fmt.Sprintf("%d != 16!", n));
		}
		return request, err;
	}
	request.addr = addr;
	request.protocol_id = binary.BigEndian.Uint64((*buffer).Bytes());
	request.action = binary.BigEndian.Uint32((*buffer).Bytes()[8:]);
	request.transaction_id = binary.BigEndian.Uint32((*buffer).Bytes()[12:]);
	// fmt.Println("Read okay!");
	fmt.Println("Received, ", string((*buffer).Bytes()[:n]));
	return request, nil;
}

func write_handshake(request udp_tracker_request, conn *net.UDPConn) (udp_tracker_response, error) {
	var response	udp_tracker_response;
	buffer := make([]byte, 16);

	response.action = 0;
	response.transaction_id = request.transaction_id;
	response.connection_id = binary.BigEndian.Uint64([]byte("\x7f\x8e\x57\xdb\xf3\x1a\x81\x20"));
	binary.BigEndian.PutUint32(buffer, 0);
	binary.BigEndian.PutUint32(buffer[4:], request.transaction_id);
	copy(buffer[12:16], []byte("\x7f\x8e\x57\xdb\xf3\x1a\x81\x20"));
	// binary.BigEndian.PutUint64(buffer[12:], )
	// binary.BigEndian.PutUint64(buffer, 0x41727101980);
	// binary.BigEndian.PutUint32(buffer[8:], 0);
	// binary.BigEndian.PutUint32(buffer[12:], transaction_id);
	if ret, err := conn.WriteTo(buffer, request.addr); err != nil || ret != 16 {
		if (err == nil) {
			fmt.Printf("Sent: %d instead of 16\n", ret);
			return response, errors.New("Didn't send the whole packet!");
		}
		return response, err;
	}
	return response, nil;
	// buffer := 
	// conn.Write([]byte("\x7f\x8e\x57\xdb\xf3\x1a\x81\x20"));
	// return udp_tracker_response{}, nil;
}

func read_query(response udp_tracker_response, conn *net.UDPConn) (ipv4_announce_request, error) {
	var request	ipv4_announce_request;
	var buffer 	*bytes.Buffer;

	if buffer = bytes.NewBuffer(make([]byte, 2048)); buffer == nil {
		return request, errors.New("Failed to initialize");
	}
	_, addr, err := conn.ReadFromUDP((*buffer).Bytes());
	if err != nil {
		// if (err == nil) {
			// return request, errors.New(fmt.Sprintf("%d != %d!", n, int(unsafe.Sizeof(request))));
		// }
		return request, err;
	}
	request.addr = addr;
	request.transaction_id = binary.BigEndian.Uint32((*buffer).Bytes()[12:]);
	// request.connection_id = response.connection_id;
	// request.action = 1
	return request, nil;
}

func write_query(request ipv4_announce_request, conn *net.UDPConn) (error) {
	var buffer	*bytes.Buffer;
	
	if buffer = bytes.NewBuffer(make([]byte, 2048)); buffer == nil {
		return errors.New("Failed to initialize");
	}
	binary.BigEndian.PutUint32((*buffer).Bytes(), 1);
	binary.BigEndian.PutUint32((*buffer).Bytes()[4:], request.transaction_id);
	copy((*buffer).Bytes()[8:], "\x00\x00\x07\x5f\x00\x00\x02\x23\x00\x00\x0f\xf1\x4e\x95\xdd\x10\xee\x68\x63\xcb\x51\x87\x00\x00\x2f\xf7\xd0\x4b\xac\xca\x50\xc8\x68\x1c\xe4\xe7\x67\x33\xe9\x0c\x30\x88\x69\xe4\x8f\xc3\xc3\x15\x70\xcb\x04\xc8\x6a\xa6\x75\xe0\x6e\x44\x2d\x93\xb9\x1b\xfa\x0a\xf3\x8c\xca\x88\x5c\x1c\x7b\x52\x24\x4c\xe5\x15\xf8\x46\x59\xa4\x2b\x8c\x2f\xb5\x2d\x73\x00\x3a\xea\x55\x63\xba\x13\xd4\x29\xcc\x70\xc8\xc9\x49\xde\xe1\x9d\x28\xc6\x4e\x00\x00\x4d\xc5\xed\x31\xcf\xdb\x68\xee\xa9\x0d\xe8\xd6\x51\x60\x6c\x11\x7a\xc3\x6a\x4f\x96\x23\xc8\x61\xcb\xec\x4b\x4c\xe8\xf6\x69\xe3\x74\x4a\x55\xef\x8d\xa8\x1a\x6d\xf4\x2e\xb2\x27\xfd\x7d\x1a\xe1\xbc\x45\xc6\x05\x30\x12\xcd\xb9\xc1\xea\xc8\xd5\xc5\xbc\xbf\x04\x36\x34\xc3\x9a\xb0\x23\xd6\xd8\xbf\x7d\xbe\xd7\x4f\xde\xb0\x3f\x12\x6c\x39\x78\xac\x59\x61\x8d\x3e\x1d\x6d\x9d\xb2\xe3\xa8\x27\x63\x6c\x01\xd2\xb0\x7c\x5c\x62\xf0\x5f\x75\xac\x5c\x02\xbb\x88\xc2\x6b\x55\xfd\x8d\x31\xeb\x23\x4f\xa6\x95\xff\x75\x10\x3b\x8c\xb4\x2e\xaa\x5b\x3a\xbb\x25\x9e\x0e\xd8\x2e\xa6\xbf\x05\x5d\xb9\x05\x47\x26\x7f\xc8\xd5\xd4\x0f\xb0\x1b\xab\x84\xc5\xe1\x59\x0e\x36\xfa\xc4\xd7\x0c\x39\xc8\xd5\xb6\x1e\x52\x8b\xd6\x56\xb3\xea\xe0\x61\xe0\x1f\xb1\xe2\x1f\xb3\x97\x61\xa0\xe2\x89\x0a\x67\xf1\x8b\x00\xb4\x97\x9a\xad\x7c\xc5\x07\x92\x3c\xc7\x74\x4b\x25\xdd\xdc\xc0\x70\x97\xed\xa9\xe2\x0e\x69\xe2\xcb\x6a\x30\x0d\x61\x46\x91\xa9\x7c\xb0\x5c\x50\x1b\xe9\x8e\xaf\x54\xd5\x21\x36\xc8\xd5\x4d\x7e\xa3\x30\xb5\xaa\x43\xab\xd8\x39\xf0\xce\x31\x80\xa4\x9e\x87\xc3\x18\xcf\x0f\x48\xb7\x48\xd5\x95\x3e\xd5\xef\x60\xc9\x25\xa1\x2b\x7f\xd3\xc3\x9a\x24\x44\xaf\xc8\xb9\x9e\x65\x6d\xdb\x58\xb1\x85\x44\xbb\x8d\x4a\xb0\xe4\x3b\x58\xf8\x4d\xa0\x14\x4b\x1a\xe1\x82\x8d\x86\x28\x51\xb0\x00\x76\x5c\x54\x94\x6e\x04\x70\x86\x59\x82\xb9\xe2\x69\xb8\x2b\x3b\x65\xc0\x5e\xcf\x98\x44\x48\x8b\x59\xee\x8c\x3a\xf3\x8c\x59\x44\xc3\x78\xd8\x9c\x54\x57\xbc\x9e\xad\xba\x51\xc8\x38\x22\x5c\x9d\x4f\xa0\x92\xb0\xe7\x64\x49\xf1\x22\xeb\xaa\x5b\x45\xf9\xe4\xdf\x46\x65\x3f\x8f\x74\x76\x68\x2c\x3c\xea\x57\x1c\x6e\x75\x2d\xf8\x4d\x93\xd8\xbf\x27\x79\xb2\x6a\x7a\x16\x18\x47\xb4\x8a\x56\xb9\xda\xd6\xcd\x56\x6e\x8a\xd9\x57\xd1\xc4\x83\xc3\xc8\x36\x95\xbe\x65\xe5\xc5\x52\xda\x96\xc3\xe1\xbc\x51\x77\xdb\x74\xc8\xb5\xbc\x2b\x92\x32\xdb\xad\xc6\x7f\x1d\xc5\x57\x97\xe7\xf5\xfd\x53\x68\x8f\xff\x39\x47\xc8\xd5\x8e\xa1\x3b\x52\x96\x89\x77\x5d\x92\xfa\x1a\xe1\x70\xc8\x61\xf3\xeb\x94\x63\x47\xbc\x86\x90\x1f\x59\x40\x0f\x1f\xa3\x31\x54\xec\x80\x18\x81\xd2\x4c\x0a\x8d\x32\x3c\x7a\x3f\x87\x00\x7b\x2c\xee\x31\x90\xc7\x12\x86\x3b\x31\x23\x44\xd9\x23\x27\x25\xbe\xf5\x11\x98\x7a\x17\xe2\x55\x1a\xa4\x1f\x0e\xc0\xd2\x81\x94\xa6\xd2\xc3\x52\x27\x37\xe5\xc4\x15\x6d\x03\xbf\xb2\xbd\x22\xb0\x65\x34\xe2\xbc\x9c\x62\xe0\x71\xaf\xba\x60\x47\x56\x99\xaa\xb3\xb9\xd0\x4e\xfc\xb4\xab\x04\xef\x57\xef\xf6\x89\x3b\xfc\xa4\x7f\xf7\x7b\xe7\x6e\x5b\xee\xd1\x70\xc9\x4b\xd5\x8a\xe7\x63\xe4\x11\xde\x7c\xf8\x5f\xa9\x21\x96\xde\x5d\x59\xd4\xc2\x13\x7d\xab\x55\xcb\x2f\xc4\x81\x66\x53\x36\x2b\x0c\x23\x27\x51\x87\x07\xf2\x2d\x9c\x49\x3d\x0b\x5c\x89\x24\x48\xfc\xb0\x06\x86\xba\x46\x41\xdd\xaa\xc3\xd9\x31\x94\x5a\xe7\xc8\x6c\x1f\xd7\xec\xf9\xee\xd1\x01\x20\x56\x24\x78\x07\xcd\xb9\xdf\xaa\x65\xe5\xbe\x2e\x28\x11\xe2\x32\xb4\xbf\x9c\x05\x2c\xd9\xb4\x47\x1e\xbe\x8d\x55\xb2\xfa\xc3\x55\xd4\x81\x7a\x3a\xe9\x48\x75\x8f\x60\x37\xe0\x66\xd3\xf9\x5c\x23\x85\xf6\xf3\x8c\x56\x1a\x50\x3f\x27\x93\x56\x11\xd2\xce\xd0\xf2\x52\x20\xd7\xbe\xaa\x28\x49\xa0\x55\x80\x61\x2a\x49\x17\x1c\xd7\x71\x75\x2e\xe6\x81\x2f\x8b\xea\x1b\x05\x9f\x16\x45\x6f\xd5\xc0\x02\x1e\xfb\xe8\xc4\xfc\x38\xc8\x94\xa4\xb8\x03\xf7\x66\x9a\xe6\xb3\x9b\xf9\x39\xbf\x99\xae\x38\xb1\xdf\xc6\xac\x9c\xdc\x07\xa0\x8a\x5f\x8e\x44\xee\xc9\xf8\xd7\x73\x42\xab\x3a\x9b\xb3\x70\xd2\x1b\x1d\x7c\xa2\x6f\x45\x57\xf8\xaf\x16\x63\xe9\xd3\x9d\x30\x0c\x5f\x95\x7d\xcf\x38\xa0\x55\xf6\xa5\xe1\xf7\x10\x51\xa4\x1d\x37\xf3\x8c\x4d\x7c\x57\x9c\xba\x42\x3e\xc5\xf3\xf3\x96\x89\x3b\x61\x99\x20\xb7\x5c\x32\x59\xac\xfd\xa0\x04\x31\x92\xe8\xc9\xd3\xd1\x2d\x38\x95\x71\x2f\x0e\x1b\xff\x1d\x86\x4a\xb1\x05\x1d\x67\x0d\x38\x0a\x02\x51\xd5\x25\x52\x89\xbe\x65\x43\xa5\x7e\x1e\xbe\x0e\x85\x95\x90\x91\xbe\x02\x7a\x50\xc8\xd5\xaf\x29\x2d\xa2\x7a\x66\x8e\xa2\xb3\xfb\xef\xca\x7a\x81\x8f\x02\xd4\x17\x5e\xd1\x27\x64\x95\xd8\x58\x62\xf1\x09\xd0\xa3\x55\x90\x89\x48\xd8\xf9\x53\xfc\x9b\xdb\xf4\x6e\x4f\x8c\x95\xee\xd4\xb5\x40\x77\x13\xe2\x97\x64\x32\x7d\x4a\x81\xa7\xa6\x25\x2c\x8e\x20\x38\x80\x02\x7e\x49\x03\xc7\xf4\xd5\x95\x3e\x97\x7d\xaa\xc4\xd2\x05\x2e\xc8\xd5\xbc\xdd\xa6\x7f\x39\x2f\xb9\x6a\x7b\x05\x4f\x04\xad\xf4\x2c\x08\x71\xa0\xad\xef\xe6\x31\xf5\xee\xac\x3a\x5b\x09\x1a\xe2\x90\x40\x4b\x02\x77\x92\x78\x1d\x64\xc2\x1a\xe1\x70\xcd\xda\xc0\x9f\x10\x6a\xcf\x68\x23\x8c\xa6\x69\xe5\x2c\x59\x56\x0d\x67\xda\x65\x41\x2a\x65\x59\xf1\xb1\xba\xb2\x2f\x53\x2b\x6c\xa1\xe7\xd4\x4f\xa8\x37\x51\xb6\x21\x4c\x0b\x1e\x94\xc8\xd5\x43\xbf\x05\x49\x7f\xa7\x31\x97\xf0\x60\x74\x1a");
	n, err := conn.WriteTo((*buffer).Bytes()[:1220], request.addr);
	if err != nil {
		return err;
	}
	fmt.Printf("Wrote %d\n bytes\n", n);
	// buffer.action = 1;
	// buffer.transaction_id = request.transaction_id;
	// copy(buffer)
	return nil;
}

func main() {
    /* Lets prepare a address at any address at port 10001*/   
    ServerAddr,err := net.ResolveUDPAddr("udp",":10001")
    CheckError(err)
 
    /* Now listen at selected port */
    ServerConn, err := net.ListenUDP("udp", ServerAddr)
    CheckError(err)
    defer ServerConn.Close()
 
	buffer := bytes.NewBuffer(make([]byte, 2048));
	if (buffer == nil) {
		panic("Failed to initialize buffer");
		// return errors.New("Failed to initialize buffer");
	}
 
    for {
    	fmt.Println("Ready...!");
    	request, err := read_handshake(ServerConn);
    	if err != nil {
    		panic(err);
    	}
    	fmt.Println("REad okay!");
    	response, err := write_handshake(request, ServerConn);
    	if err != nil {
    		panic(err);
    	}
    	fmt.Println("WRite oK!");
        // n,addr,err := ServerConn.ReadFromUDP(buffer)

        // fmt.Println("Received ",string(buffer[0:n]), " from ",addr)
 
        // if err != nil {
            // fmt.Println("Error: ",err)
        // }
        // ServerConn.WriteTo([]byte("\x00\x00\x00\x00\x00\x00\x00\x2a\x7f\x8e\x57\xdb\xf3\x1a\x81\x20"), addr); 
        query_req, err := read_query(response, ServerConn);
        if err != nil {
        	panic(err);
        }
        err = write_query(query_req, ServerConn);
        if err != nil {
        	panic(err);
        }
        // n,addr,err := ServerConn.ReadFromUDP((*buffer).Bytes())
        // fmt.Println("Received ",string((*buffer).Bytes()[0:n]), " from ",addr)
 
        // if err != nil {
        //     fmt.Println("Error: ",err)
        // }
        // ServerConn.WriteTo([]byte("\x00\x00\x07\x5f\x00\x00\x02\x23\x00\x00\x0f\xf1\x4e\x95\xdd\x10\xee\x68\x63\xcb\x51\x87\x00\x00\x2f\xf7\xd0\x4b\xac\xca\x50\xc8\x68\x1c\xe4\xe7\x67\x33\xe9\x0c\x30\x88\x69\xe4\x8f\xc3\xc3\x15\x70\xcb\x04\xc8\x6a\xa6\x75\xe0\x6e\x44\x2d\x93\xb9\x1b\xfa\x0a\xf3\x8c\xca\x88\x5c\x1c\x7b\x52\x24\x4c\xe5\x15\xf8\x46\x59\xa4\x2b\x8c\x2f\xb5\x2d\x73\x00\x3a\xea\x55\x63\xba\x13\xd4\x29\xcc\x70\xc8\xc9\x49\xde\xe1\x9d\x28\xc6\x4e\x00\x00\x4d\xc5\xed\x31\xcf\xdb\x68\xee\xa9\x0d\xe8\xd6\x51\x60\x6c\x11\x7a\xc3\x6a\x4f\x96\x23\xc8\x61\xcb\xec\x4b\x4c\xe8\xf6\x69\xe3\x74\x4a\x55\xef\x8d\xa8\x1a\x6d\xf4\x2e\xb2\x27\xfd\x7d\x1a\xe1\xbc\x45\xc6\x05\x30\x12\xcd\xb9\xc1\xea\xc8\xd5\xc5\xbc\xbf\x04\x36\x34\xc3\x9a\xb0\x23\xd6\xd8\xbf\x7d\xbe\xd7\x4f\xde\xb0\x3f\x12\x6c\x39\x78\xac\x59\x61\x8d\x3e\x1d\x6d\x9d\xb2\xe3\xa8\x27\x63\x6c\x01\xd2\xb0\x7c\x5c\x62\xf0\x5f\x75\xac\x5c\x02\xbb\x88\xc2\x6b\x55\xfd\x8d\x31\xeb\x23\x4f\xa6\x95\xff\x75\x10\x3b\x8c\xb4\x2e\xaa\x5b\x3a\xbb\x25\x9e\x0e\xd8\x2e\xa6\xbf\x05\x5d\xb9\x05\x47\x26\x7f\xc8\xd5\xd4\x0f\xb0\x1b\xab\x84\xc5\xe1\x59\x0e\x36\xfa\xc4\xd7\x0c\x39\xc8\xd5\xb6\x1e\x52\x8b\xd6\x56\xb3\xea\xe0\x61\xe0\x1f\xb1\xe2\x1f\xb3\x97\x61\xa0\xe2\x89\x0a\x67\xf1\x8b\x00\xb4\x97\x9a\xad\x7c\xc5\x07\x92\x3c\xc7\x74\x4b\x25\xdd\xdc\xc0\x70\x97\xed\xa9\xe2\x0e\x69\xe2\xcb\x6a\x30\x0d\x61\x46\x91\xa9\x7c\xb0\x5c\x50\x1b\xe9\x8e\xaf\x54\xd5\x21\x36\xc8\xd5\x4d\x7e\xa3\x30\xb5\xaa\x43\xab\xd8\x39\xf0\xce\x31\x80\xa4\x9e\x87\xc3\x18\xcf\x0f\x48\xb7\x48\xd5\x95\x3e\xd5\xef\x60\xc9\x25\xa1\x2b\x7f\xd3\xc3\x9a\x24\x44\xaf\xc8\xb9\x9e\x65\x6d\xdb\x58\xb1\x85\x44\xbb\x8d\x4a\xb0\xe4\x3b\x58\xf8\x4d\xa0\x14\x4b\x1a\xe1\x82\x8d\x86\x28\x51\xb0\x00\x76\x5c\x54\x94\x6e\x04\x70\x86\x59\x82\xb9\xe2\x69\xb8\x2b\x3b\x65\xc0\x5e\xcf\x98\x44\x48\x8b\x59\xee\x8c\x3a\xf3\x8c\x59\x44\xc3\x78\xd8\x9c\x54\x57\xbc\x9e\xad\xba\x51\xc8\x38\x22\x5c\x9d\x4f\xa0\x92\xb0\xe7\x64\x49\xf1\x22\xeb\xaa\x5b\x45\xf9\xe4\xdf\x46\x65\x3f\x8f\x74\x76\x68\x2c\x3c\xea\x57\x1c\x6e\x75\x2d\xf8\x4d\x93\xd8\xbf\x27\x79\xb2\x6a\x7a\x16\x18\x47\xb4\x8a\x56\xb9\xda\xd6\xcd\x56\x6e\x8a\xd9\x57\xd1\xc4\x83\xc3\xc8\x36\x95\xbe\x65\xe5\xc5\x52\xda\x96\xc3\xe1\xbc\x51\x77\xdb\x74\xc8\xb5\xbc\x2b\x92\x32\xdb\xad\xc6\x7f\x1d\xc5\x57\x97\xe7\xf5\xfd\x53\x68\x8f\xff\x39\x47\xc8\xd5\x8e\xa1\x3b\x52\x96\x89\x77\x5d\x92\xfa\x1a\xe1\x70\xc8\x61\xf3\xeb\x94\x63\x47\xbc\x86\x90\x1f\x59\x40\x0f\x1f\xa3\x31\x54\xec\x80\x18\x81\xd2\x4c\x0a\x8d\x32\x3c\x7a\x3f\x87\x00\x7b\x2c\xee\x31\x90\xc7\x12\x86\x3b\x31\x23\x44\xd9\x23\x27\x25\xbe\xf5\x11\x98\x7a\x17\xe2\x55\x1a\xa4\x1f\x0e\xc0\xd2\x81\x94\xa6\xd2\xc3\x52\x27\x37\xe5\xc4\x15\x6d\x03\xbf\xb2\xbd\x22\xb0\x65\x34\xe2\xbc\x9c\x62\xe0\x71\xaf\xba\x60\x47\x56\x99\xaa\xb3\xb9\xd0\x4e\xfc\xb4\xab\x04\xef\x57\xef\xf6\x89\x3b\xfc\xa4\x7f\xf7\x7b\xe7\x6e\x5b\xee\xd1\x70\xc9\x4b\xd5\x8a\xe7\x63\xe4\x11\xde\x7c\xf8\x5f\xa9\x21\x96\xde\x5d\x59\xd4\xc2\x13\x7d\xab\x55\xcb\x2f\xc4\x81\x66\x53\x36\x2b\x0c\x23\x27\x51\x87\x07\xf2\x2d\x9c\x49\x3d\x0b\x5c\x89\x24\x48\xfc\xb0\x06\x86\xba\x46\x41\xdd\xaa\xc3\xd9\x31\x94\x5a\xe7\xc8\x6c\x1f\xd7\xec\xf9\xee\xd1\x01\x20\x56\x24\x78\x07\xcd\xb9\xdf\xaa\x65\xe5\xbe\x2e\x28\x11\xe2\x32\xb4\xbf\x9c\x05\x2c\xd9\xb4\x47\x1e\xbe\x8d\x55\xb2\xfa\xc3\x55\xd4\x81\x7a\x3a\xe9\x48\x75\x8f\x60\x37\xe0\x66\xd3\xf9\x5c\x23\x85\xf6\xf3\x8c\x56\x1a\x50\x3f\x27\x93\x56\x11\xd2\xce\xd0\xf2\x52\x20\xd7\xbe\xaa\x28\x49\xa0\x55\x80\x61\x2a\x49\x17\x1c\xd7\x71\x75\x2e\xe6\x81\x2f\x8b\xea\x1b\x05\x9f\x16\x45\x6f\xd5\xc0\x02\x1e\xfb\xe8\xc4\xfc\x38\xc8\x94\xa4\xb8\x03\xf7\x66\x9a\xe6\xb3\x9b\xf9\x39\xbf\x99\xae\x38\xb1\xdf\xc6\xac\x9c\xdc\x07\xa0\x8a\x5f\x8e\x44\xee\xc9\xf8\xd7\x73\x42\xab\x3a\x9b\xb3\x70\xd2\x1b\x1d\x7c\xa2\x6f\x45\x57\xf8\xaf\x16\x63\xe9\xd3\x9d\x30\x0c\x5f\x95\x7d\xcf\x38\xa0\x55\xf6\xa5\xe1\xf7\x10\x51\xa4\x1d\x37\xf3\x8c\x4d\x7c\x57\x9c\xba\x42\x3e\xc5\xf3\xf3\x96\x89\x3b\x61\x99\x20\xb7\x5c\x32\x59\xac\xfd\xa0\x04\x31\x92\xe8\xc9\xd3\xd1\x2d\x38\x95\x71\x2f\x0e\x1b\xff\x1d\x86\x4a\xb1\x05\x1d\x67\x0d\x38\x0a\x02\x51\xd5\x25\x52\x89\xbe\x65\x43\xa5\x7e\x1e\xbe\x0e\x85\x95\x90\x91\xbe\x02\x7a\x50\xc8\xd5\xaf\x29\x2d\xa2\x7a\x66\x8e\xa2\xb3\xfb\xef\xca\x7a\x81\x8f\x02\xd4\x17\x5e\xd1\x27\x64\x95\xd8\x58\x62\xf1\x09\xd0\xa3\x55\x90\x89\x48\xd8\xf9\x53\xfc\x9b\xdb\xf4\x6e\x4f\x8c\x95\xee\xd4\xb5\x40\x77\x13\xe2\x97\x64\x32\x7d\x4a\x81\xa7\xa6\x25\x2c\x8e\x20\x38\x80\x02\x7e\x49\x03\xc7\xf4\xd5\x95\x3e\x97\x7d\xaa\xc4\xd2\x05\x2e\xc8\xd5\xbc\xdd\xa6\x7f\x39\x2f\xb9\x6a\x7b\x05\x4f\x04\xad\xf4\x2c\x08\x71\xa0\xad\xef\xe6\x31\xf5\xee\xac\x3a\x5b\x09\x1a\xe2\x90\x40\x4b\x02\x77\x92\x78\x1d\x64\xc2\x1a\xe1\x70\xcd\xda\xc0\x9f\x10\x6a\xcf\x68\x23\x8c\xa6\x69\xe5\x2c\x59\x56\x0d\x67\xda\x65\x41\x2a\x65\x59\xf1\xb1\xba\xb2\x2f\x53\x2b\x6c\xa1\xe7\xd4\x4f\xa8\x37\x51\xb6\x21\x4c\x0b\x1e\x94\xc8\xd5\x43\xbf\x05\x49\x7f\xa7\x31\x97\xf0\x60\x74\x1a"), addr); 
    }
}